/* **********************************************************
 * Copyright (c) 2011-2014 Google, Inc.  All rights reserved.
 * Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
 * **********************************************************/

/* Dr. Memory: the memory debugger
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation;
 * version 2.1 of the License, and no later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Library General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/* Conventions:
 * + We use \verbatim b/c it nicely highlights command lines, but
 *   because aliases aren't expanded in \verbatim (or \code), we have
 *   a post-processing pass that replaces them.  We used to use
 *   \par<tt>...</tt> to get aliases expanded but it doesn't look
 *   as nice.  Note that \if is NOT supported by the script so
 *   use it outside the \verbatim.
 */

/**
***************************************************************************
***************************************************************************
\page page_reports Error Reports

This page describes further details on error reports, including how to
suppress specific reports:

 - \subpage page_suppress
 - \subpage page_replace
 - \subpage page_syslib_syms

\if work_around_doxygen_bug_where_aliases_only_expand_after_verbatim
\verbatim
\endverbatim
\endif

********************
\page page_suppress Suppressing Errors

If Dr. Memory is reporting numerous errors that appear to be false
positives and originate in libraries that are not part of your application,
consider using the blocklist and allowlist options to isolate them, which
may be more effective than suppressing individual errors.  See \ref
sec_potential_errors for more information.

To aid in suppressing individual errors, Dr. Memory generates a file named
\p suppress.txt alongside the \p
results.txt file.  To suppress errors from being reported in future runs,
edit this file to contain just the errors you wish to suppress.  Then pass
the file to \p \FRONT_END with the -suppress option:

\verbatim
drmemory.exe -suppress c:/suppress-custom.txt -- myapp
\endverbatim

The suppress.txt generated by Dr. Memory will contain suppression information
only for those errors that weren't suppressed using the -suppress option.  For
each error reported in suppress.txt, there will be two types of call stacks,
one showing \p <module+offset> type frames and the other \p module!function
type frames.  The offset in \p <module+offset> must be a lower-case hexadecimal
constant (e.g., \p 0x4af) and is the offset from the start of the module.
Either type of call stack can be used and it is enough if one
of those two is specified.   The \p module!function are more general and
more robust across different versions of a module.

In order to simplify writing suppressions, callstacks support "*" and "?"
wildcards in either the module or function name (or offset for \p
<module+offset>).  A "*" matches any number of characters of any kind.  A
"?" matches a single character of any kind.  C++ functions should be in
their unmangled form.  If a literal "*" is desired, a "?" should usually be
used instead to avoid the "*" wildcard expansion.

To match any frame at all, use a single "*".  To match any module but not
any non-module (and thus not match a system call or non-module code, such
as generated code), use "*!*".

Callstacks automatically employ prefix matching.  Prefix matching
means that the callstack in the suppression file is considered a match if
it matches the top of any actual callstack during a run.  This allows
specifying only the first few frames of a callstack and have it match any
callstack whose first frames match those frames, regardless of subsequent
frames.

A final type of wildcard frame is supported: "...".  A callstack frame
consisting of the string "..." matches zero or more frames in the
callstack.

As a variation on the "..." ellipsis frame, "module!..." matches one or
more frames in a given module.  Importantly, it will not match zero frames
like a plain ellipsis.  This form is most useful for suppressing reports
through system libraries that are missing symbols, because oftentimes such
reports can be identified by the way they call back and forth across system
library boundaries.

Suppression files can have empty lines and comment lines (begining with #).
There should be no leading white space for the actual suppression information.
Suppressions should not end with "...", which is unnecessary due to the implicit
prefix matching.

A suppression can be given an identifier with a \p name= line after
the error type line.  Suppressions that were matched are printed in the
results file with a count of how many unique callstacks were matched.
Duplicate callstacks are not included.  Here is an example:

\code
LEAK
name=bug #456 (deliberately leaked object)
mylib.dll!LeakMe
mylib.dll!*
\endcode

On Windows, for unaddressable accesses and uninitialized reads, a
suppression can be further restricted by the actual instruction involved.
The instruction is printed out in an error report in a \p Note: field.  For
example:
\code
Error #8: UNADDRESSABLE ACCESS beyond heap bounds: reading 0x001338a8-0x001338ac 4 byte(s)
...
Note: instruction: mov    (%eax) -> %eax
\endcode

A suppression can contain an \p instruction= line after the error type line
which will be matched against this note field.  It can contain wildcards.
Here is an example:

\code
UNINITIALIZED READ
name=bug #123 (deliberate uninitialized read to generate random number)
instruction=test   * $0x00000?00
myranlib.dll!GenRanHelper*
myranlib.dll!GenRan*
\endcode

For users with existing Valgrind Memcheck suppression files, Dr. Memory
supports Valgrind-style suppressions, but not with mangled C++ symbols.
On Linux and Mac, a script called \p valgrind2drmemory.pl is provided in the bin
directory that can be used to convert a legacy Valgrind suppression file to
the Dr. Memory format.  It uses heuristics to convert mangled C++ symbols
that contain wildcards and may not succeed on complex types (it prints a
warning for those it fails on).  Use it like this:

\code
bin/valgrind2drmemory.pl /path/to/old-supp-file /path/to/new-drmem-towrite
\endcode

The Dr. Memory suppression format is more powerful then the Valgrind format
and matches the Windows module!function standards used by other tools.  We
recommend converting to the Dr. Memory format from a legacy format.

Another method of ignoring errors is to filter the reported errors to focus
on particular source files or particular libraries, using Dr. Memory's
allowlisting options.  See \ref sec_potential_errors for further
information on allowlists.

A final method of ignoring uninitialized reads, in particular, for an
entire library is described in \ref sec_no_uninit_checks.

To get more information on what errors are being suppressed, run with
\p -log_suppressed_errors.  All suppressed reports will be printed to the global
logfile.

Dr. Memory comes with a set of default suppressions to avoid certain known
false positives (and known true positives, i.e., actual bugs) in the C and
C++ libraries and other locations.  These can be disabled with the option
-no_default_suppress.

********************
\page page_replace Replaced Routines

Dr. Memory replaces several string and memory routines in the C library,
executable, and other libraries, in order to avoid false positives from
extremely-optimized versions of these routines.  So if an application
expects a crash inside a routine like \p strlen, do not be alarmed if it
shows up as \p replace_strlen in the Dr. Memory library rather than \p
strlen in the C library.

********************
\page page_syslib_syms System Library Symbols

On Linux, Dr. Memory will look in the default debug directories for symbols
for a library: a <tt>.debug</tt> subdirectory of the library's directory or
in <tt>/usr/lib/debug</tt>.

On Mac, Dr. Memory will look in the default debug directories for symbols
for a library: a <tt>.dSYM</tt> subdirectory of the library's directory.

On Windows, the <tt>_NT_SYMBOL_PATH</tt> environment variable is honored by
Dr. Memory as a local cache of \p pdb files.  However, Dr. Memory does not
support symbol store paths (those that contain \p srv).

****************************************************************************
****************************************************************************
*/
