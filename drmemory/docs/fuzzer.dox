/* **********************************************************
 * Copyright (c) 2015 Google, Inc.  All rights reserved.
 * **********************************************************/

/* Dr. Memory: the memory debugger
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation;
 * version 2.1 of the License, and no later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Library General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
***************************************************************************
***************************************************************************
\page page_fuzzer Fuzz Testing Mode

Dr. Memory provides a fuzz testing mode that repeatedly executes one function
in the target application, mutating the value of one argument before each
iteration. Fuzz mode is configured using a set of runtime options
that all share a \p -fuzz_ prefix.
For example, \p -fuzz_function specifies the function name for fuzzing.
The aggregate runtime option \p -fuzz_target can
also be used to configure the fuzz target. An overview of each option and
descriptor format is provided in the
\ref page_options (and the command line help text). Many of these options
require a more complete explanation, which is provided in the following
sections.

 - \ref sec_fuzzer_target
 - \ref sec_cpp_targets
 - \ref sec_calling_conventions
 - \ref sec_mutator
 - \ref sec_corpus

\section sec_fuzzer_target Fuzzer Target

The fuzzer is capable of testing one target function on potentially multiple
concurrent threads.

The fuzzer can locate the target function via either its symbol name
or its offset from the start of the module with the following options:
  - \p -fuzz_module: the module name that refers to a single binary
  image file such as a library (.so or .dll) or an application
  executable (.exe on Windows);
  - \p -fuzz_function or \p -fuzz_offset
    - \p -fuzz_function: the target function name;
    - \p -fuzz_offset: the offset from the module base.

In addition, to repeatedly execute the target function, the fuzzer
needs to know
  - \p -fuzz_num_args: how many arguments are passed to the function;
  - \p -fuzz_data_idx: the ordinal number of the argument that should be fuzzed;
  - \p -fuzz_size_idx: the ordinal number of the argument that
    specifies the size of the fuzzed argument;
  - \p -fuzz_num_iters: how many iterations the function is to be repeated.

For example, to fuzz the following C function in the "a.out" executable:

    void DrMemFuzzFunc(unsigned char *buffer, size_t size);

you would specify the following command-line option to \p drmemory:

    -fuzz_module a.out -fuzz_function DrMemFuzzFunc -fuzz_num_args 2 -fuzz_data_idx 0 -fuzz_size_idx 1 -fuzz_num_iters 100

Alternatively, users can specify the target function on the Dr. Memory command
line using the aggregate option \p -fuzz_target:

    -fuzz_target 'a.out!DrMemFuzzFunc|2|0|1|100'

In bash, use single-quotes to avoid special behaviors of the '!' and '|' characters.

Users can skip an option if its value is the same as its default value.
For the example above, the shortest command-line option is:

    -fuzz

\section sec_cpp_targets C++ Targets

Specifying C function targets is much simpler than C++ targets because the
symbol name is the plain text name of the function, and the calling convention
is almost always the default. For C++ functions, the mangled or de-mangled name
is required. On Unix the fuzzer only accepts mangled names, while on Windows it
accepts both the mangled and de-mangled names (for the former, use Windows-only
option \p -fuzz_mangled_names). To fuzz the following function on
Unix (compiling the app as 32-bit with gcc):

    void CryptoMagic::MungeBuffer(unsigned int *buffer, size_t size);

you would specify the following option to \p drmemory:

    -fuzz_target 'crypto!_ZN11CryptoMagic11MungeBufferEPjj|2|0|1|0'

\section sec_calling_conventions Calling Conventions

The fuzzer's default calling convention is \p cdecl on 32-bit x86 platforms,
\p AMD64 on 64-bit *nix, and \p Microsoft \p x64 for Visual Studio 64-bit
applications.  Use the option \p -fuzz_call_convention to specify a
different calling convention for fuzz target functions. For example,
to fuzz a C++ non-static member function, you would specify the following
command-line option to \p drmemory:

    -fuzz_call_convention \p thiscall

Possible -fuzz_call_convention value includes:
  - amd64: AMD64
  - arm32: ARM32
  - fastcall: fastcall
  - ms64: Microsoft x64 (Visual Studio)
  - stdcall: cdecl or stdcall
  - thiscall: thiscall

It is also possible to
use the optional last field of option \p -fuzz_target to
specify a different calling convention. For example, to fuzz the following
function on Windows (compiling the app with Visual Studio):

    void CryptoMagic::MungeBuffer(unsigned int *buffer, size_t size);

you would specify:

    -fuzz_target 'crypto.exe!?MungeBuffer-CryptoMagic--QAEXPAII-Z|3|1|2|0|6'

The value \p 6 at the last field specifies the calling convention '\p thiscall'
(as defined by the enum
\p drwrap_callconv_t in the DynamoRIO header file \p drwrap.h). Since the
\p MungeBuffer() method is a non-static class member, the first argument
is reserved by the compiler for the \p this pointer. Accordingly, the
argument indexes in the descriptor (fields 3 and 4, \p "|1|2|") have been
adjusted to account for the implicit first argument, along with the argument
count (field 2, \p "|3|"). Notice that the \p '@' characters in the symbol
have been escaped with \p '-' for compatibility with the Dr. Memory command-line
processor.

\section sec_mutator Mutator

The mutator is responsible for modifying the input to the target function
on each iteration.  A default mutator with a variety of options, including
various random and sequential mutation strategies, is provided.  Dr. Memory
exposes all of the options for Dr. Fuzz's default mutator as front-end
options.  Please see the documentation under \ref sec_drfuzz_mutators as
well as the \p -fuzz_mutator_* options listed under \ref page_options.
The option \p -fuzz_coverage must be specified for any custom mutator
that implements feedback guided mutation.

\section sec_dump_load Dumping and Loading Fuzz Input Data

On reporting an error during fuzzing, Dr. Memory dumps the fuzz input
data to a file in the log directory.  The dumped file can be used
for reproducing the error later with the option \p -fuzz_input_file.
For example, to load input.dat for reproducing an error, you would
specify the following command-line option to \p drmemory:

    -fuzz_input_file input.dat -fuzz_num_iters 0

\section sec_corpus Corpus-Based Fuzzing

Dr. Memory supports corpus-based fuzzing through the following options:
 - \p -fuzz_corpus: the directory for loading and storing the corpus inputs
 - \p -fuzz_corpus_out: the directory for storing the minimized corpus inputs

Each input is stored by itself in a separate file in a specified directory,
and that there should be nothing else in the directory.

For example, to fuzz the function \p DrMemFuzzFunc with a set of inputs stored in
/path/to/inputs/ and dump the minimized corpus inputs to /path/to/min_corpus/,
you would specify the following command-line option to \p drmemory:

    -fuzz_corpus /path/to/inputs -fuzz_corpus_out /path/to/min_corpus/

Dr. Memory's fuzz mode typically performs a leak scan only at the end of the entire
fuzz run or on request. This option allows you to perform leak detection after every
target function execution.

 - \p -fuzz_per_iter_leak_scan: whether to run a leak scan after **every**
   target function execution.

Enabling this option is useful for precisely isolating the input iteration that
causes a memory leak, which aids in reproduction and minimization. The outputs
of these leak scans are stored in the fuzz_results.txt file. The types of leaks reported
are additionally controlled by the \p -possible_leaks and \p -show_reachable options.

For example, to fuzz the function \p DrMemFuzzFunc with per-iteration leak scanning enabled,
you would specify the following command-line option to \p drmemory:

    -fuzz_module a.out -fuzz_function DrMemFuzzFunc -fuzz_per_iter_leak_scan

****************************************************************************
****************************************************************************
*/
