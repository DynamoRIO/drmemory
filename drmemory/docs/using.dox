/* **********************************************************
 * Copyright (c) 2011-2019 Google, Inc.  All rights reserved.
 * Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
 * **********************************************************/

/* Dr. Memory: the memory debugger
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation;
 * version 2.1 of the License, and no later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Library General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/* Conventions:
 * + We use \verbatim b/c it nicely highlights command lines, but
 *   because aliases aren't expanded in \verbatim (or \code), we have
 *   a pre-processing pass that replaces them.  We used to use
 *   \par<tt>...</tt> to get aliases expanded but it doesn't look
 *   as nice.  Note that \if is NOT supported by the script so
 *   use it outside the \verbatim.
 */

/**
***************************************************************************
***************************************************************************
\page page_install Installing Dr. Memory

Select your platform for instructions on how to install Dr. Memory onto
your computer:

 - \subpage page_install_linux
 - \subpage page_install_macos
 - \subpage page_install_windows
 - \subpage page_install_android

***************************************************************************
\page page_install_linux Installing on Linux

\if PACKAGED_WITH_DYNAMORIO
This package contains a local Dr. Memory install that can be executed
directly from the <tt>drmemory/bin</tt> directory, or by using DynamoRIO's
<tt>drrun</tt> with the <tt>-t drmemory</tt> or <tt>-t drmemory_light</tt>
tool flags.  The instructions below cover installing a separate local
install using a standalone Dr. Memory package.
\endif

********************
\section sec_linux_install Installing

Download the \p .tar.gz version of Dr. Memory.  Untar the package into a
directory of your choice:

\verbatim
tar xzf DrMemory-Linux-X.X.X-X.tar.gz
\endverbatim

Now either place the \p bin subdirectory of the Dr. Memory directory
structure on your PATH, or invoke Dr. Memory via its full path.

***************************************************************************
\page page_install_macos Installing on Mac

\if PACKAGED_WITH_DYNAMORIO
This package contains a local Dr. Memory install that can be executed
directly from the <tt>drmemory/bin</tt> directory, or by using DynamoRIO's
<tt>drrun</tt> with the <tt>-t drmemory</tt> or <tt>-t drmemory_light</tt>
tool flags.  The instructions below cover installing a separate local
install using a standalone Dr. Memory package.
\endif

********************
\section sec_macos_utils System Requirements

Ensure your compiler is able to build 32-bit applications, since
Dr. Memory does not yet support 64-bit applications on Mac OSX.  XCode
by default is able to do so.

Operating systems older than OSX 10.9 (Mavericks) are not officially
supported.

********************
\section sec_macos_install Installing

Download the \p .tar.gz version of Dr. Memory.  Untar the package into a
directory of your choice:

\verbatim
tar xzf DrMemory-MacOS-X.X.X-X.tar.gz
\endverbatim

Now either place the \p bin subdirectory of the Dr. Memory directory
structure on your PATH, or invoke Dr. Memory via its full path.

***************************************************************************
\page page_install_windows Installing on Windows

\if PACKAGED_WITH_DYNAMORIO
This package contains a local Dr. Memory install that can be executed
directly from the <tt>drmemory\\bin</tt> directory, or by using DynamoRIO's
<tt>drrun</tt> with the <tt>-t drmemory</tt>, <tt>-t drmemory_light</tt>,
or <tt>-t handle_leaks</tt> tool flags.  If you prefer a system install,
you will need to <a href="http://drmemory.org">download the installer</a>.
\endif

********************
\section sec_windows_system System Install

Download the \p .msi version of Dr. Memory and launch it to run the
Dr. Memory installer.  The installer automatically adds Dr. Memory to the
PATH for the current user, to simplify use of the tool (however, currently
on Windows 10 the PATH is not propagated: manually applying an empty change
to the PATH, or rebooting, will update the PATH for newly created shells).
It also places a Dr. Memory icon on the desktop if you would like to run
your applications under Dr. Memory by dragging and dropping.

If you already have a prior version of Dr. Memory installed, uninstall it
before installing a new version.  The uninstaller can be run either from
its Start Menu entry or from the "Add or Remove Programs" dialog box in
Control Panel.

********************
\section sec_windows_local Local Install

Download the \p .zip version of Dr. Memory.  Extract the files from the \p
.zip archive into a directory of your choice.  Now either place the \p bin
subdirectory of the Dr. Memory directory structure on your PATH, or invoke
Dr. Memory via its full path.

To edit your PATH to include Dr. Memory, from the "Start" menu, open the
"Control Panel". Click on "System". Then click on "Advanced system
settings". Say "Yes" to the User Account Control message.  Choose the
"Advanced" tab and click on "Environment Variables". In the top box, under
User Variables for your username, click on "PATH", then click on
"Edit". Assuming you unzipped Dr. Memory into "C:\INSTALL", go to the end
and add ";C:\INSTALL\DrMemory-Windows-X.X.X-X\bin" (with the X's replaced
with the version you installed, of course).  Note that the semicolon
(;) is important!  After editing your PATH, you should restart your Cygwin
or cmd shell.

***************************************************************************
\page page_install_android Installing on Android

Download the \p .tar.gz version of Dr. Memory for Android.  Untar the
package into a directory on your local machine:

\verbatim
tar xzf DrMemory-ARM-Android-EABI-X.X.X-X.tar.gz
\endverbatim

Now copy the entire unpacked directory to your Android device (typically
using <tt>adb push</tt>).  The <tt>bin/drmemory</tt> front-end can be
invoked directly from the <tt>adb shell</tt>.  Dr. Memory for Android is
targeted toward native applications that use Android's NDK.

Dr. Memory requires a writable temporary directory.  If neither
<tt>/data/local/tmp</tt> nor the current working directory are writable,
you will need to specify a writable directory via the \p TMPDIR environment
variable.  Configuration, symbol caching, and result log files will be
placed at the specified location.

For Android Java applications on recent versions of Android, SELinux
prevents writing to <tt>/data/local/tmp</tt>.  The application's data
directory should be pointed at in the \p TMPDIR environment variable, as
shown below in the example wrapper script.  SELinux also prevents executing
from <tt>/data/local/tmp</tt>.  For non-native applications, we recommend
copying the Dr. Memory package into <tt>/system/xbin</tt>, though be sure
to point \p TMPDIR to a location both allowed by SElinux and with more
space (typically the application's own <tt>/data/data</tt> sub-directory:
see the preparation instructions specific to \ref sec_prep_android).

If you run into problems with configuration files being created due to
SELinux denials (look in the logs for such denials), it may be simplest to
disable SELinux via <tt>setenforce 0</tt>.  We have attempted to get
everything to work without this step, but we are not able to test on all
versions or configurations of Android.

***************************************************************************
\page page_prep Preparing Your Application

First we give cross-plaform guidelines for how to build your application,
before giving specific compiler parameters for each platform.

********************
\section sec_prep_general For All Platforms

These cross-platform steps apply to Linux, Mac, and Windows.

********************
\subsection sec_prep_debuginfo Debug Information

In order to obtain line number information, compile your target
application with debugging information enabled.
On Linux, Dr. Memory supports ELF files with DWARF2 line information.
On Mac, Dr. Memory supports Mach-O files with DWARF2 line information.  On
Windows, Dr. Memory supports PDB debug information (produced by Visual
Studio) as well as PECOFF files with DWARF2 line information (produced by
MinGW gcc).

********************
\subsection sec_prep_callstacks Callstack Quality

You'll get better callstacks in error reports if you disable inlining.
Dr. Memory should be able to determine callstacks in the presence of frame
pointer optimizations (FPO) in most cases, but if you see strange
callstacks in an optimized application consider disabling FPO.

If your application links with a static library that was built with frame
pointer optimizations and you observe missing frames on your callstacks,
try running with the Dr. Memory runtime options \p -no_callstack_use_top_fp,
\p -no_callstack_use_fp, and \p -callstack_conservative.
These will add some additional overhead on malloc-intensive applications,
but should eliminate skipped frames.

********************
\section sec_prep_linux Linux

Dr. Memory currently only supports DWARF2 line information, not stabs.
DWARF2 is the default for modern versions of \p gcc.

Here is a sample command line for compiling your application that combines
all of the above recommendations:

\verbatim
g++ -g -fno-inline -fno-omit-frame-pointer myfile1.cpp myfile2.cpp -o myapp
\endverbatim

********************
\section sec_prep_mac Mac

Ensure your compiler is able to build 32-bit applications.

Dr. Memory currently only supports DWARF2 line information, not stabs.
DWARF2 is the default for modern versions of \p gcc as well as \p clang.

Here is a sample command line for compiling your application that combines
all of the above recommendations:

\verbatim
c++ -m32 -g -fno-inline -fno-omit-frame-pointer myfile1.cpp myfile2.cpp -o myapp
\endverbatim

********************
\section sec_prep_windows Windows Visual Studio

To include debug information, use the \p /Zi flag to the Visual Studio
compiler.  From the IDE, Press Alt-F7 to bring up the configuration
properties of your build target. Under "Configuration Properties | C/C++ |
General", the "Debug Information Format" entry should either say "Program
Database (/Zi)" or "Program Database for Edit and Continue (/ZI)".
Additionally, under "Configuration Properties | Linker | Debugging", the
"Generate Debug Info" entry should say "Yes (/DEBUG)".  For Visual Studio
2015, under "Configuration Properties | Linker | Debugging", the
"Generate Debug Info" entry should say "Optimize for debugging (/DEBUG)" --
it should <em>not</em> say "Optimize for faster linking (/DEBUG:FASTLINK)".
For Visual Studio 2017 it should say "Generate Debug Information
optimized for sharing and publishing (/DEBUG:FULL)" -- it should
<em>not</em> say "Generate Debug Information (/DEBUG)" nor "Generate
Debug Information optimized for faster links (/DEBUG:FASTLINK)".

To disable inlining as recommended above, use the \p /Ob0 parameter.  In
the Visual Studio IDE, press Alt-F7 and then under "Configuration
Properties | C/C++ | Optimization" ensure "Inline Function Expansion" says
"Disabled (/Ob0)".

To disable frame pointer optimization as recommended above, use the \p Oy-
parameter.  In the Visual Studio IDE, press Alt-F7 and then under
"Configuration Properties | C/C++ | Optimization" ensure "Omit Frame
Pointers" says "No (/Oy-)".

**********
\subsection sec_prep_win_libc C Library Interactions

All combinations of the debug or release C library, linked statically or
dynamically, are supported.  When using static versions of msvcrt (the \p
/MTd or \p /MT flags), if your application does not have symbols then
Dr. Memory will not be able to identify memory allocation calls, which may
lead to false positives and/or false negatives.  Be sure to build with
debugging information included using the instructions above.

The debug C library (specified with the \p /MDd or \p /MTd flags) contains
its own redzone and heap error checks.  Dr. Memory completely replaces
these checks with its own, more complete checks.

**********
\subsection sec_prep_win_rtc Disable Runtime Checks

The Visual Studio compiler's \p /RTC1 flag can prevent Dr. Memory from
reporting uninitialized reads of local variables, and the \p /RTC1 checks
for uninitialized reads themselves may not catch everything that Dr. Memory
finds.  However, \p /RTC1 does perform additional stack checks that
Dr. Memory does not, so for best results, your application should be run
under Dr. Memory without \p /RTC1, and run natively with \p /RTC1.

In the Visual Studio IDE, press Alt-F7 and then under "Configuration
Properties | C/C++ | Code Generation" ensure "Basic Runtime Checks" says
"Default".

**********
\subsection sec_prep_win_sum Parameter Summary

Here is a sample command line for Visual Studio:

\verbatim
cl /Zi /MT /EHsc /Oy- /Ob0 /Femyapp.exe *.cpp
\endverbatim

********************
\section sec_prep_mingw Windows MinGW

Dr. Memory supports applications compiled with the MinGW gcc or g++
compilers, but will only provide line number information if DWARF2
debugging information is present.  The default for MinGW gcc prior to
version 4.3 is to use the stabs format, which is not supported by
Dr. Memory.  Pass the \p -ggdb option to gcc to generate DWARF2 format
instead.

You install the MinGW compiler in a Cygwin installation by running the
Cygwin installer (\p setup.exe), searching for "mingw", opening Devel, and
installing \p mingw-gcc-g++.  Alternatively, MinGW can be installed on its
own.

For MinGW C++ applications, we recommending building with static libstdc++
libraries.  Pass <tt>-static-libgcc -static-libstdc++</tt> to g++ to
request this.  These static libraries contain frame pointer optimizations
but Dr. Memory automatically enables the \p -no_callstack_use_top_fp
runtime option for MinGW applications.

Here is a sample command line for MinGW, using the "mingw64-i686-gcc-g++:
GCC for Win32 (i686-w64-mingw32) toolchain (C++)" Cygwin package (this is a
32-bit compiler available for both 32-bit and 64-bit Cygwin):

\verbatim
i686-w64-mingw32-g++.exe -static-libgcc -static-libstdc++ -ggdb -o myapp.exe myfile1.cpp myfile2.cpp
\endverbatim

********************
\section sec_prep_cygwin Windows Cygwin: Not Supported

Currently there is no support for applications built with Cygwin gcc or g++.

The regular Dr. Memory build can be executed just fine from a Cygwin
shell when targeting non-Cygwin applications.

********************
\section sec_prep_android Android

Build your application using the Android NDK and copy it over to your device.
Be sure to compile with debugging information included and to disable FPO,
as described in \ref sec_prep_general.

While Java applications are not yet officially supported, we welcome
contributions to help work toward full Android Java support.  To launch an
Android Java application under Dr. Memory, use a wrapper script and
point at the script via the \p logwrapper property set on your
application's name prefixed by \p <tt>wrap.</tt>.  For example, if your
application's name is <tt>com.myco.appname</tt>, set the property for
<tt>wrap.com.myco.appname</tt>, truncating to 31 characters:

\code
setprop wrap.com.myco.appname "logwrapper /system/xbin/wrap.sh"
\endcode

The wrapper shell script should contain the command line prefix you wish to
use to launch your application under Dr. Memory.  It should also set \p
TMPDIR to point to the directory for your application, which is a location
where SElinux allows writing:

\code
#!/system/bin/sh
export TMPDIR=/data/data/com.myco.appname
exec /system/xbin/drmemory/bin/drmemory -- $@
\endcode

See also the information on SElinux and writable directories under \ref
page_install_android.  Be sure to place the Dr. Memory binaries and the
wrapper script in an executable location, such as <tt>/system/xbin</tt>.
Alternatively, disable SELinux via <tt>setenforce 0</tt>.

***************************************************************************
\page page_running Running Dr. Memory

Once you have installed Dr. Memory and built your application properly, the
next step is to execute it on your workload of choice under Dr. memory.

To fuzz test an application, use Dr. Memory's \ref page_fuzzer.

********************
\section sec_vstudio Dr. Memory as a Visual Studio Tool

Dr. Memory has support for running within the Visual Studio IDE as an
External Tool.  The Windows installer automatically creates a new Tools
menu entry for launching Dr. Memory for each version of Visual Studio
detected at install time.  If you are using a local install, or if you
installed Visual Studio after installing Dr. Memory, or if you are using
Visual Studio Express 2010 and it was in Basic mode at the time you
installed Dr. Memory, you will need to follow the following instructions in
order to add Dr. Memory as an External Tool.

If using Visual Studio Express 2010, first enable the full menu
system by selecting <tt>Tools | Settings | Expert Settings</tt> (this step
is not necessary for Visual Studio Professional or later versions of Visual
Studio Express).

Next, for Visual Studio 2005 through 2012, select the <tt>Tools | External
Tools...</tt> menu option to open the External Tools dialog box.  Click Add
and fill in the fields as follows (adjusting the path to \p drmemory.exe if
you installed it somewhere else):

\verbatim
Title: Dr. Memory
Command: C:\Program Files (x86)\Dr. Memory\bin\drmemory.exe
Arguments: -visual_studio -- $(TargetPath)
Initial Directory: $(TargetDir)
\endverbatim

Check the <tt>Use Output window</tt> checkbox.  Click OK.

For Visual Studio 6, select <tt>Tools | Customize</tt>, then the \p Tools
tab, and then click the \p New button.  Fill in the fields as above, though
the \p Title field is instead the input box in the main list.  Also, you'll
want quotes around the TargetPath variable (but you do not want quotes for
any later Visual Studio version):

\verbatim
Command: C:\Program Files\Dr. Memory\bin\drmemory.exe
Arguments: -visual_studio -- "$(TargetPath)"
Initial Directory: $(TargetDir)
\endverbatim

Now you can select <tt>Tools | Dr. Memory</tt> and Visual Studio will run
your application.  The output of Dr. Memory (along with your program) will
be printed to the Output Window.  You can double-click on a source file on
any callstack frame in order to automatically open up that file to the line
number indicated.

To pass arguments to your application, in the External Tools dialog box
entry for Dr. Memory, either directly add them for all runs, or check the
"Prompt for arguments" checkbox to be prompted for arguments on each
invocation.  Add application arguments at the end, after the pre-filled-in
string:

\verbatim
-visual_studio -- $(TargetPath) ADD ARGUMENTS HERE
\endverbatim.

For Dr. Memory as an External Tool set up by the Dr. Memory installer,
prompting for arguments is on by default.

********************
\section sec_invocation Invoking Dr. Memory from the Command Line

Run your application as you normally would from a command prompt (on
Windows, either the \p cmd shell or a Cygwin prompt), with \p \FRONT_END
and "--" prefixed to the command line (the "--" separates any arguments to
Dr. Memory from the application being run).

On Windows:
\verbatim
drmemory.exe -- c:/path/to/my/app args to my app
\endverbatim

On Linux, Mac, or an Android native application:
\verbatim
drmemory -- /path/to/my/app args to my app
\endverbatim

Examples throughout the rest of the documentation will use just one platform,
but can readily be adapted to the other by changing the front-end (\p
drmemory.exe or \p drmemory) and the path style.

If as part of \ref page_install you did not add Dr. Memory to your path,
you'll need to specify the full path to Dr. Memory.

On Windows, you can also drag-and-drop your application onto \p drmemory.exe in
Windows Explorer or on the Desktop if you requested a Desktop shorcut upon
installation.

For Java applications on Android, see the information under Preparing Your
Application for \ref sec_prep_android.

When running scripts it is best to explicitly invoke the interpreter rather
than invoking the script directly.  For example:

\verbatim
drmemory -- /usr/bin/perl ./myscript.pl
\endverbatim

********************
\section sec_results Examining the Results

Dr. Memory's results are written to a file called \p results.txt inside a
subdirectory created for each invocation of Dr. Memory, inside Dr. Memory's
log directory.  The log directory by default is the \p logs subdirectory of
the unpacked installation, or the Dr. Memory directory inside your profile
directory when Dr. Memory is installed into <tt>Program Files</tt> on Windows.  It can be
changed with the \p -logdir option:

\verbatim
drmemory.exe -logdir c:/logs -- c:/path/to/my/app
\endverbatim

When an application is executed under Dr. Memory's control, it creates a
subdirectory in the base log directory named
"DrMemory-<appname>.<pid>.NNN", where NNN is a counter that is incremented
to ensure unique names.

On Windows, the results files is automatically opened in \p notepad when
the application exits.  This only occurs for the top-level process; if it
created child processes, they will be followed by Dr. Memory and have their
own result directories and files, but these will not be automatically
displayed.  The option \p -batch can be used to disable the launch of \p
notepad at application exit.

For full details on each type of error reported by Dr. Memory, see \ref page_types.

If you would like to attach a debugger at the point an error is first
detected, use the \p -pause_at_unaddressable or \p -pause_at_uninitialized
options (see \ref page_options).

**********
\subsection sec_potential_errors Application Versus System Library Errors

Current versions of Dr. Memory can end up reporting uninitialized read and
leak errors in system library code on large Windows applications.  Future
Dr. Memory versions will eliminate these errors, but for now these likely
false positive errors are listed in a separate file from the normal \p
results.txt called \p potential_errors.txt.  The count of such errors is
listed in the <tt>ERRORS IGNORED</tt> section of the main error summary.
For example:
\verbatim
ERRORS IGNORED:
     17 potential error(s) (suspected false positives)
         (details: D:\drmemory\logs\DrMemory-myapp.exe.5144.000\potential_errors.txt)
     24 potential leak(s) (suspected false positives)
         (details: D:\drmemory\logs\DrMemory-myapp.exe.5144.000\potential_errors.txt)
\endverbatim

It is possible that some of these errors are in fact application errors in
parameters passed to system library routines where those parameters are not
used or read until deep into a system library callstack, though they are
suspected of being false positives due to being reported in several layers
of system library code.  The pattern checking used to identify system
libraries whose errors should be reported separately can be tuned via two
features, a blacklist and a whitelist.  Each feature contains patterns
against which file paths are matched.  These patterns can contain \p * or
\p ? wildcards.

The whitelist takes precedence and if set the blacklist is ignored.  The
whitelist is empty by default.  The option \p -lib_whitelist contains a
;-separated sequence of patterns against which library or executable paths
are matched.  The option \p -lib_whitelist_frames controls how many of the
top frames in each callstack are matched.  If a whitelist pattern appears
in any of those top frames, an error is reported normally.  Otherwise, it
is separated as a potential error.  The expected usage model is to populate
the whitelist with a list of paths in which application libraries or
executables reside, to limit the error reports to those paths.

The blacklist is controlled by parallel options \p -lib_blacklist and \p
-lib_blacklist_frames.  Running with <tt>-lib_blacklist_frames 0</tt> will
disable the blacklist and report all errors as application errors in \p
results.txt.  When non-zero, it controls how many of the top frames must
all match the blacklist before an error is separated as a potential error.
The blacklist is only enabled by default on Windows, where it is set to \p
$SYSTEMROOT*.d??.

An additional whitelist based on source file paths is available under the
options \p -src_whitelist and \p -src_whitelist_frames.  If combined with
\p -lib_whitelist, the library-based whitelist acts first, with the source
file-based whitelist filtering the errors that remain.

If many false positives are being reported and additional performance is
desired at the risk of not detecting all application errors, Dr. Memory's
\ref page_light can be used to disable checking for uninitialized reads and
leaks.

**********
\subsection sec_no_uninit_checks Eliminating Uninitialized Read Checks By Library

Dr. Memory has an additional type of blacklist beyond the blacklist for
system library errors described in \ref sec_potential_errors.  This
blacklist is controlled by the option \p -check_uninit_blacklist, which is
a ,-separated list of library names.  Unlike the other blacklist, these
names are basenames and not whole paths, as they are meant to correspond to
library names given in suppression files.  For each library on this list,
Dr. Memory will not report any uninitialized reads while directly executing the
library's code.  This is a more efficient means to eliminate
errors than using suppressions or the \p -lib_blacklist option, but it only
applies to uninitialized reads.

When Dr. Memory sees a whole-module suppression -- a suppression containing
only a single frame of the form "name!*" -- it automatically adds "name" to
the \p -check_uninit_blacklist option list.

********************
\section sec_children Controlling Child Processes

By default, Dr. Memory monitors all child processes.  To disable this
behavior and not monitor any children, use this option:

\verbatim
drmemory.exe -no_follow_children -- c:/path/to/my/app
\endverbatim

On Windows, to follow all children except certain applications, run this
command with the executable name of each application you do not wish to
monitor, prior to running Dr. Memory with default options:

\verbatim
drconfig.exe -quiet -reg <myapp> -norun
\endverbatim

Where "myapp" is the basename of your executable (i.e., the file name
without any directories).

The \p drconfig.exe tool is in the same directory as \p drmemory.exe and is
only available on Windows in the current release.

This \p -norun request is permanent and affects all subsequent Dr. Memory
executions by the user that issued the \p -norun request.  To undo it, use
this command:

\verbatim
drconfig.exe -quiet -unreg <myapp>
\endverbatim

\if ISSUE_614
********************
\section sec_aggregate Aggregating Results From Multiple Processes

Dr. Memory supports aggregating results from multiple log directories,
whether from multiple processes of a multi-process application or from
multiple runs of the same application.  Simply use the \p -aggregate option
and supply the list of log directories, or a single directory containing
the log directories as sub-directories to aggregate all of them:

\verbatim
drmemory -aggregate DrMemory-myapp.1234.000 DrMemory-myapp.1235.000
\endverbatim

\verbatim
drmemory -aggregate /parent/logdir/
\endverbatim

Currently the \p -aggregate option is not available on Windows.
\endif

********************
\section sec_daemon Applications That Do Not Exit

While Dr. Memory updates the \p results.txt file as the application runs,
it does not perform leak checking or produce a summary of errors until the
end of the run.  For applications that do not have a normal exit, such as
daemons, Dr. Memory provides a method of forcing end-of-run actions.

Run \p \FRONT_END with the \p -nudge option and the process identifier of
the application in order to request leak checking and other end-of-run
actions:

\verbatim
drmemory.exe -nudge <processid>
\endverbatim

********************
\section sec_perf Tuning for Performance

Dr. Memory's default options are set up to find the most errors.  Several
key options can be adjusted to improve performance, at the cost of less
information on each error report or even identification of fewer error
types.  Reducing \p -malloc_max_frames, disabling \p -delay_frees_stack,
and disabling leak checking can improve performance on malloc-intensive
applications.  For more significant improvements, consider using
Dr. Memory's \ref page_light.

\if ISSUE_446
********************
\section sec_twostep Post-Run Symbol Processing

Some applications have very large symbol files.  To reduce resource usage
during an application run, symbol processing can be disabled while the
application executes and instead be performed after the run.  Use the \p
-skip_results option when running the application.  Once finished, re-run
Dr. Memory with the \p -results option and the log directory created during
the run (which contains the raw data):

\verbatim
drmemory -skip_results -- myapp myargs
\endverbatim

\verbatim
drmemory -results DrMemory-myapp.9876.000
\endverbatim

If \p -results is invoked on a different machine where the application
executable is not located at the same path as when it was executed with \p
-skip_results, use the \p -results_app parameter to specify the executable
along with the \p -results parameter.

The \p -skip_results option is not currently available on Windows.
\endif

****************************************************************************
****************************************************************************
*/
/* It's good to split up large C comments: we've hit some sort of doxygen
 * internal buffering error before if one comment gets too long.
 */
